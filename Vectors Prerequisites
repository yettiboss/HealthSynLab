### Prerequisites

- **Elasticsearch**: Make sure you have an Elasticsearch instance running. You can install it locally or use a hosted service.
- **Python Packages**: Install necessary Python packages.
  
```bash
pip install elasticsearch numpy scikit-learn
```

### Step 1: Setting Up ElasticSearch for Vector Storage

First, configure an Elasticsearch index to store vectors. This index will have a mapping that allows for storing dense vectors.

```python
from elasticsearch import Elasticsearch

# Connect to Elasticsearch
es = Elasticsearch(hosts=["http://localhost:9200"])

# Define the mapping for the index
index_name = "healthcare_vectors"
mapping = {
    "mappings": {
        "properties": {
            "patient_id": {"type": "keyword"},
            "encounter_id": {"type": "keyword"},
            "vector": {
                "type": "dense_vector",
                "dims": 768  # Adjust according to the size of your vectors
            },
            "encounter_type": {"type": "keyword"},
            "notes": {"type": "text"}
        }
    }
}

# Create the index with the mapping
if not es.indices.exists(index=index_name):
    es.indices.create(index=index_name, body=mapping)
```

### Step 2: Inserting Vectors into Elasticsearch

Next, create and store vectors in the Elasticsearch index.

```python
import numpy as np

# Example vector data
patient_id = "patient_001"
encounter_id = "encounter_001"
vector = np.random.rand(768).tolist()  # Example vector with 768 dimensions
encounter_type = "Outpatient"
notes = "Routine checkup and chiropractic adjustment"

# Index the document
doc = {
    "patient_id": patient_id,
    "encounter_id": encounter_id,
    "vector": vector,
    "encounter_type": encounter_type,
    "notes": notes
}

es.index(index=index_name, id=encounter_id, body=doc)
```

### Step 3: Searching for Similar Vectors in Elasticsearch

You can use a script query to find vectors that are similar to a given vector.

```python
query_vector = np.random.rand(768).tolist()  # Example query vector

search_query = {
    "query": {
        "script_score": {
            "query": {"match_all": {}},
            "script": {
                "source": "cosineSimilarity(params.query_vector, 'vector') + 1.0",
                "params": {"query_vector": query_vector}
            }
        }
    }
}

response = es.search(index=index_name, body=search_query)
for hit in response["hits"]["hits"]:
    print(f"Found document ID: {hit['_id']} with score: {hit['_score']}")
```

### Step 4: Using Vectors in Downstream Tasks

#### Example: Clustering Vectors

You can use clustering algorithms like K-Means to group similar vectors.

```python
from sklearn.cluster import KMeans

# Example: Retrieve vectors from Elasticsearch for clustering
search_query = {
    "query": {"match_all": {}},
    "_source": ["vector"],
    "size": 1000  # Adjust size as needed
}

response = es.search(index=index_name, body=search_query)
vectors = np.array([hit["_source"]["vector"] for hit in response["hits"]["hits"]])

# Perform K-Means clustering
kmeans = KMeans(n_clusters=5, random_state=0).fit(vectors)

# Print cluster assignments
for i, cluster in enumerate(kmeans.labels_):
    print(f"Document ID {response['hits']['hits'][i]['_id']} is in cluster {cluster}")
```

### Step 5: Using Vectors for Predictive Modeling

You can use vectors as features in a machine learning model for tasks like outcome prediction.

```python
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Assume we have labels (e.g., binary outcome: 0 or 1)
labels = np.random.randint(0, 2, size=len(vectors))

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(vectors, labels, test_size=0.2, random_state=42)

# Train a simple logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate the model
accuracy = model.score(X_test, y_test)
print(f"Model accuracy: {accuracy:.2f}")
```

### Step 6: Retrieve and Use Vector Data

You can retrieve vectors and use them in various downstream tasks, such as personalized patient recommendations or predictive analytics.

---

This code provides a comprehensive example of how to store, search, 
and use LLM-generated vectors in ElasticSearch, and how to apply them in clustering and predictive modeling tasks. 
